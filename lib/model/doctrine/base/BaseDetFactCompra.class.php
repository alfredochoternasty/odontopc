<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DetFactCompra', 'doctrine');

/**
 * BaseDetFactCompra
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $factcompra_id
 * @property integer $producto_id
 * @property integer $grupoprod_id
 * @property decimal $precio
 * @property integer $cantidad
 * @property decimal $subtotal
 * @property decimal $iva
 * @property decimal $total
 * @property string $nro_lote
 * @property FactCompra $Factura
 * @property Producto $Producto
 * @property Grupoprod $Grupoprod
 * 
 * @method integer       getId()            Returns the current record's "id" value
 * @method integer       getFactcompraId()  Returns the current record's "factcompra_id" value
 * @method integer       getProductoId()    Returns the current record's "producto_id" value
 * @method integer       getGrupoprodId()   Returns the current record's "grupoprod_id" value
 * @method decimal       getPrecio()        Returns the current record's "precio" value
 * @method integer       getCantidad()      Returns the current record's "cantidad" value
 * @method decimal       getSubtotal()      Returns the current record's "subtotal" value
 * @method decimal       getIva()           Returns the current record's "iva" value
 * @method decimal       getTotal()         Returns the current record's "total" value
 * @method string        getNroLote()       Returns the current record's "nro_lote" value
 * @method FactCompra    getFactura()       Returns the current record's "Factura" value
 * @method Producto      getProducto()      Returns the current record's "Producto" value
 * @method Grupoprod     getGrupoprod()     Returns the current record's "Grupoprod" value
 * @method DetFactCompra setId()            Sets the current record's "id" value
 * @method DetFactCompra setFactcompraId()  Sets the current record's "factcompra_id" value
 * @method DetFactCompra setProductoId()    Sets the current record's "producto_id" value
 * @method DetFactCompra setGrupoprodId()   Sets the current record's "grupoprod_id" value
 * @method DetFactCompra setPrecio()        Sets the current record's "precio" value
 * @method DetFactCompra setCantidad()      Sets the current record's "cantidad" value
 * @method DetFactCompra setSubtotal()      Sets the current record's "subtotal" value
 * @method DetFactCompra setIva()           Sets the current record's "iva" value
 * @method DetFactCompra setTotal()         Sets the current record's "total" value
 * @method DetFactCompra setNroLote()       Sets the current record's "nro_lote" value
 * @method DetFactCompra setFactura()       Sets the current record's "Factura" value
 * @method DetFactCompra setProducto()      Sets the current record's "Producto" value
 * @method DetFactCompra setGrupoprod()     Sets the current record's "Grupoprod" value
 * 
 * @package    odontopc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDetFactCompra extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('det_fact_compra');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('factcompra_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('producto_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('grupoprod_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('precio', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('cantidad', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));
        $this->hasColumn('subtotal', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('iva', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('total', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('nro_lote', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FactCompra as Factura', array(
             'local' => 'factcompra_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Producto', array(
             'local' => 'producto_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('Grupoprod', array(
             'local' => 'grupoprod_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));
    }
}