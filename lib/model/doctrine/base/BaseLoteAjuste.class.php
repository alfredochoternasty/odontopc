<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LoteAjuste', 'doctrine');

/**
 * BaseLoteAjuste
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property date $fecha
 * @property integer $producto_id
 * @property string $nro_lote
 * @property integer $zona_id
 * @property integer $cantidad
 * @property string $observacion
 * @property integer $usuario_id
 * @property Producto $Producto
 * @property Zona $Zona
 * @property Lote $Lote
 * @property sfGuardUser $sfGuardUser
 * 
 * @method integer     getId()          Returns the current record's "id" value
 * @method date        getFecha()       Returns the current record's "fecha" value
 * @method integer     getProductoId()  Returns the current record's "producto_id" value
 * @method string      getNroLote()     Returns the current record's "nro_lote" value
 * @method integer     getZonaId()      Returns the current record's "zona_id" value
 * @method integer     getCantidad()    Returns the current record's "cantidad" value
 * @method string      getObservacion() Returns the current record's "observacion" value
 * @method integer     getUsuarioId()   Returns the current record's "usuario_id" value
 * @method Producto    getProducto()    Returns the current record's "Producto" value
 * @method Zona        getZona()        Returns the current record's "Zona" value
 * @method Lote        getLote()        Returns the current record's "Lote" value
 * @method sfGuardUser getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method LoteAjuste  setId()          Sets the current record's "id" value
 * @method LoteAjuste  setFecha()       Sets the current record's "fecha" value
 * @method LoteAjuste  setProductoId()  Sets the current record's "producto_id" value
 * @method LoteAjuste  setNroLote()     Sets the current record's "nro_lote" value
 * @method LoteAjuste  setZonaId()      Sets the current record's "zona_id" value
 * @method LoteAjuste  setCantidad()    Sets the current record's "cantidad" value
 * @method LoteAjuste  setObservacion() Sets the current record's "observacion" value
 * @method LoteAjuste  setUsuarioId()   Sets the current record's "usuario_id" value
 * @method LoteAjuste  setProducto()    Sets the current record's "Producto" value
 * @method LoteAjuste  setZona()        Sets the current record's "Zona" value
 * @method LoteAjuste  setLote()        Sets the current record's "Lote" value
 * @method LoteAjuste  setSfGuardUser() Sets the current record's "sfGuardUser" value
 * 
 * @package    odontopc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLoteAjuste extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('lote_ajuste');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('fecha', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('producto_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('nro_lote', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('zona_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('cantidad', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('observacion', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('usuario_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Producto', array(
             'local' => 'producto_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('Zona', array(
             'local' => 'zona_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('Lote', array(
             'local' => 'nro_lote',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'usuario_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));
    }
}