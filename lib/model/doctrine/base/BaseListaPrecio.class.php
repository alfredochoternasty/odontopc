<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ListaPrecio', 'doctrine');

/**
 * BaseListaPrecio
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $nombre
 * @property integer $moneda_id
 * @property integer $aumento
 * @property integer $descuento
 * @property decimal $precio
 * @property boolean $defecto
 * @property boolean $activo
 * @property Doctrine_Collection $Detalle
 * @property TipoMoneda $Moneda
 * @property Doctrine_Collection $Cliente
 * @property Doctrine_Collection $Producto
 * @property Doctrine_Collection $Resumen
 * @property Doctrine_Collection $DetalleResumen
 * @property Doctrine_Collection $Presupuesto
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getNombre()         Returns the current record's "nombre" value
 * @method integer             getMonedaId()       Returns the current record's "moneda_id" value
 * @method integer             getAumento()        Returns the current record's "aumento" value
 * @method integer             getDescuento()      Returns the current record's "descuento" value
 * @method decimal             getPrecio()         Returns the current record's "precio" value
 * @method boolean             getDefecto()        Returns the current record's "defecto" value
 * @method boolean             getActivo()         Returns the current record's "activo" value
 * @method Doctrine_Collection getDetalle()        Returns the current record's "Detalle" collection
 * @method TipoMoneda          getMoneda()         Returns the current record's "Moneda" value
 * @method Doctrine_Collection getCliente()        Returns the current record's "Cliente" collection
 * @method Doctrine_Collection getProducto()       Returns the current record's "Producto" collection
 * @method Doctrine_Collection getResumen()        Returns the current record's "Resumen" collection
 * @method Doctrine_Collection getDetalleResumen() Returns the current record's "DetalleResumen" collection
 * @method Doctrine_Collection getPresupuesto()    Returns the current record's "Presupuesto" collection
 * @method ListaPrecio         setId()             Sets the current record's "id" value
 * @method ListaPrecio         setNombre()         Sets the current record's "nombre" value
 * @method ListaPrecio         setMonedaId()       Sets the current record's "moneda_id" value
 * @method ListaPrecio         setAumento()        Sets the current record's "aumento" value
 * @method ListaPrecio         setDescuento()      Sets the current record's "descuento" value
 * @method ListaPrecio         setPrecio()         Sets the current record's "precio" value
 * @method ListaPrecio         setDefecto()        Sets the current record's "defecto" value
 * @method ListaPrecio         setActivo()         Sets the current record's "activo" value
 * @method ListaPrecio         setDetalle()        Sets the current record's "Detalle" collection
 * @method ListaPrecio         setMoneda()         Sets the current record's "Moneda" value
 * @method ListaPrecio         setCliente()        Sets the current record's "Cliente" collection
 * @method ListaPrecio         setProducto()       Sets the current record's "Producto" collection
 * @method ListaPrecio         setResumen()        Sets the current record's "Resumen" collection
 * @method ListaPrecio         setDetalleResumen() Sets the current record's "DetalleResumen" collection
 * @method ListaPrecio         setPresupuesto()    Sets the current record's "Presupuesto" collection
 * 
 * @package    odontopc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseListaPrecio extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('lista_precio');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nombre', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('moneda_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('aumento', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('descuento', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('precio', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('defecto', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('activo', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('DetLisPrecio as Detalle', array(
             'local' => 'id',
             'foreign' => 'lista_id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('TipoMoneda as Moneda', array(
             'local' => 'moneda_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasMany('Cliente', array(
             'local' => 'id',
             'foreign' => 'lista_id'));

        $this->hasMany('Producto', array(
             'local' => 'id',
             'foreign' => 'lista_id'));

        $this->hasMany('Resumen', array(
             'local' => 'id',
             'foreign' => 'lista_id'));

        $this->hasMany('DetalleResumen', array(
             'local' => 'id',
             'foreign' => 'lista_id'));

        $this->hasMany('Presupuesto', array(
             'local' => 'id',
             'foreign' => 'lista_id'));
    }
}